#!/usr/bin/env python
from datetime import date, datetime
from curses import *
import csv
import os
from pathlib import Path
from configparser import ConfigParser


# Write configuration file if it does not exist
config_folder = str(Path.home())+"/.config/mincal"
if not os.path.exists(config_folder):
    os.makedirs(config_folder)
config_file = config_folder + "/config.ini"
conf = ConfigParser()

default_hint =  "n: Next month · p: Previous month · a: Add event · d: Delete · e: Edit · i: calcurse import · q: Quit · ?: Help"

def create_config():
    '''Create config file if it does not exist yet'''
    conf["Parameters"] = {
            "folder_with_datafile":      str(config_folder),
            "birthdays_from_abook":      "Yes",
            "show_keybindings":          "Yes",
            "show_day_names":            "Yes",
            "minimal_today_indicator":   "Yes",
            "minimal_days_indicator":    "Yes",
            "minimal_weekend_indicator": "Yes",
            "cut_titles_by_cell_length": "No",
            "ask_confirmations":         "No",
            "use_unicode_icons":         "Yes",
            "event_icon":                "•",
            "today_icon":                "•",
            "birthday_icon":             "★",
            "hidden_icon":               "...",
            }

    conf["Colors"] = {
            "color_today":         "2",
            "color_days":          "7",
            "color_day_names":     "4",
            "color_weekends":      "1",
            "color_weekend_names": "1",
            "color_hints":         "7",
            "color_propmts":       "7",
            "color_confirmations": "1",
            "color_birthdays":     "1",
            }

    conf["Day names"] = {
            "mon": "MONDAY",
            "tue": "TUESDAY",
            "wed": "WEDNESDAY",
            "thu": "THURSDAY",
            "fri": "FRIDAY",
            "sat": "SATURDAY",
            "sun": "SUNDAY",
            }

    conf["Month names"] = {
            "jan": "JANUARY",
            "feb": "FEBRUARY",
            "mar": "MARCH",
            "apr": "APRIL",
            "may": "MAY",
            "jun": "JUNE",
            "jul": "JULY",
            "aug": "AUGUST",
            "sep": "SEPTEMBER",
            "oct": "OCTOBER",
            "nov": "NOVEMBER",
            "dec": "DECEMBER",
            }

    conf["Dialogues"] = {"hint": default_hint}

    conf["Event icons"] = {
            "travel":      "✈",
            "plane":       "✈",
            "trip":        "✈",
            "voyage":      "✈",
            "flight":      "✈",
            "airport":     "✈",
            "vacation":    "⛱",
            "holyday":     "⛱",
            "day-off":     "⛱",
            "hair":        "✂",
            "barber":      "✂",
            "beauty":      "✂",
            "nails":       "✂",
            "game":        "♟",
            "match":       "♟",
            "play":        "♟",
            "interview":   "♟",
            "date":        "♥",
            "concert":     "♪",
            "gig":         "♪",
            "disco":       "♪",
            "music":       "♪",
            "rehersal":    "♪",
            "call":        "☎",
            "phone":       "☎",
            "deadline":    "⚑",
            "over":        "⚑",
            "finish":      "⚑",
            "end":         "⚑",
            "appointment": "✔",
            "task ":       "✔",
            "doctor":      "⛑",
            "dentist":     "⛑",
            "medical":     "⛑",
            "hospital":    "⛑",
            "party":       "☘",
            "museum":      "⛬",
            "meet":        "⛬",
            "talk":        "⛬",
            "conference":  "⛬",
            "hearing":     "⛬",
            "sport":       "⛷",
            "gym":         "⛷",
            "training":    "⛷",
            }
    with open(config_file, 'w') as f:
        conf.write(f)

# Load configuration file
if not os.path.exists(config_file):
    create_config()

try:
    conf.read(config_file)
    SHOW_KEYBINDINGS          = conf.getboolean("Parameters", "show_keybindings", fallback=True)
    SHOW_DAY_NAMES            = conf.getboolean("Parameters", "show_day_names", fallback=True)
    MINIMAL_TODAY_INDICATOR   = conf.getboolean("Parameters", "minimal_today_indicator", fallback=True)
    MINIMAL_DAYS_INDICATOR    = conf.getboolean("Parameters", "minimal_days_indicator", fallback=True)
    MINIMAL_WEEKEND_INDICATOR = conf.getboolean("Parameters", "minimal_weekend_indicator", fallback=True)
    ASK_CONFIRMATIONS         = conf.getboolean("Parameters", "ask_confirmations", fallback=True)
    DISPLAY_ICONS             = conf.getboolean("Parameters", "use_unicode_icons", fallback=True)
    CUT_TITLES                = conf.getboolean("Parameters", "cut_titles_by_cell_length", fallback=False)
    BIRTHDAYS_FROM_ABOOK      = conf.getboolean("Parameters", "birthdays_from_abook", fallback=True)
    TODAY_ICON                = conf.get("Parameters", "today_icon", fallback="•")
    EVENT_ICON                = conf.get("Parameters", "event_icon", fallback="•")
    BIRTHDAY_ICON             = conf.get("Parameters", "birthday_icon", fallback="★")
    HIDDEN_ICON               = conf.get("Parameters", "hidden_icon", fallback="...")

    COLOR_TODAY         = int(conf.get("Colors", "color_today", fallback=2))
    COLOR_DAYS          = int(conf.get("Colors", "color_days", fallback=7))
    COLOR_DAY_NAMES     = int(conf.get("Colors", "color_day_names", fallback=4))
    COLOR_WEEKENDS      = int(conf.get("Colors", "color_weekends", fallback=1))
    COLOR_WEEKEND_NAMES = int(conf.get("Colors", "color_weekend_names", fallback=1))
    COLOR_HINTS         = int(conf.get("Colors", "color_hints", fallback=7))
    COLOR_PROPMTS       = int(conf.get("Colors", "color_propmts", fallback=7))
    COLOR_BIRTHDAYS     = int(conf.get("Colors", "color_birthdays", fallback=1))
    COLOR_CONFIRMATIONS = int(conf.get("Colors", "color_confirmations", fallback=1))

    MON = conf.get("Day names", "mon", fallback="MONDAY")
    TUE = conf.get("Day names", "tue", fallback="TUESDAY")
    WED = conf.get("Day names", "wed", fallback="WEDNESDAY")
    THU = conf.get("Day names", "thu", fallback="THURSDAY")
    FRI = conf.get("Day names", "fri", fallback="FRIDAY")
    SAT = conf.get("Day names", "sat", fallback="SATURDAY")
    SUN = conf.get("Day names", "sun", fallback="SUNDAY")

    HINT = conf.get("Dialogues", "hint", fallback=default_hint)

    JAN = conf.get("Month names", "jan", fallback="JANUARY")
    FEB = conf.get("Month names", "feb", fallback="FEBRUARY")
    MAR = conf.get("Month names", "mar", fallback="MARCH")
    APR = conf.get("Month names", "apr", fallback="APRIL")
    MAY = conf.get("Month names", "may", fallback="MAY")
    JUN = conf.get("Month names", "jun", fallback="JUNE")
    JUL = conf.get("Month names", "jul", fallback="JULY")
    AUG = conf.get("Month names", "aug", fallback="AUGUST")
    SEP = conf.get("Month names", "sep", fallback="SEPTEMBER")
    OCT = conf.get("Month names", "oct", fallback="OCTOBER")
    NOV = conf.get("Month names", "nov", fallback="NOVEMBER")
    DEC = conf.get("Month names", "dec", fallback="DECEMBER")
    MONTH_NAMES = [JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC]

    try:
        ICONS = {word: icon for (word, icon) in conf.items("Event icons")}
    except:
        ICONS = {}

    data_folder = conf.get("Parameters", "folder_with_datafile", fallback=config_folder) 
except:
    print("Error in the config.ini file. Try deleting the config file and run the program again.")
    exit()


DATAFILE = data_folder + "/appointments.csv"
if not os.path.exists(data_folder):
    os.makedirs(data_folder)


def import_events_from_calcurse(all_events):
    '''Importing events from calcurse apt file into our appointments file'''
    calcurse_file = str(Path.home())+"/.local/share/calcurse/apts"
    with open(calcurse_file, "r") as f:
        lines = f.readlines()
    for index, line in enumerate(lines):
        month = line[0:2]
        day = line[3:5]
        year = line[6:10]
        if line[11] == "[":
            name = line[15:-1]
        elif line[11] == "@":
            name = line[41:-1]
        event_id = 1 if not all_events[0] else max(all_events[0])+1
        new_event = str(event_id+index)+","+year+","+month+","+day+","+'"'+name+'"'
        with open(DATAFILE, "a") as f:
            f.write(new_event+"\n")


def parse_birthdays_from_abook():
    '''Loading birthdays from abook contacts'''
    abook_file = str(Path.home())+"/.abook/addressbook"
    bd_names, bd_months, bd_dates = [], [], []
    abook = ConfigParser()
    abook.read(abook_file)
    for each_contact in abook.sections():
        for (key, value) in abook.items(each_contact):
            if key == "birthday":
                bd_names.append(abook[each_contact]["name"])
                bd_months.append(int(abook[each_contact]["birthday"][-5:-3]))
                bd_dates.append(int(abook[each_contact]["birthday"][-2:]))
    return bd_names, bd_months, bd_dates


def days_max_this_month(year, month):
    '''Return the number of days in a given month of a given year'''
    leap = 0
    if year % 400 == 0:
        leap = 1
    elif year % 100 == 0:
        leap = 0
    elif year % 4 == 0:
        leap = 1
    if month == 2:
        return 28 + leap
    if month in [1,3,5,7,8,10,12]:
        return 31
    return 30


def days_of_this_month(this_month, this_year):
    '''Calculate the days for the calendar table 7x6'''
    days_in_month = days_max_this_month(this_year, this_month)
    first_day = date(this_year, this_month, 1).weekday() # First day of the month
    dates = [0]*first_day				 # Fill the table for this month
    dates.extend(range(1,1 + days_in_month))
    dates.extend([0]*(7*6 - len(dates)))
    return dates


def load_appointments(stdscr, y_max):
    '''Read from user's appointments file or create it if it does not exist'''
    try:
        with open(DATAFILE) as f:
            pass
    except IOError:
        with open(DATAFILE, "w+") as f:
            pass

    with open(DATAFILE,"r") as f:
        apts = csv.reader(f, delimiter = ',')
        all_events = [[], [], [], [], []]
        try:
            for row in apts:
                all_events[0].append(int(row[0]))
                all_events[1].append(int(row[1]))
                all_events[2].append(int(row[2]))
                all_events[3].append(int(row[3]))
                all_events[4].append(row[4])
        except:
            pass
    return all_events


def add_event(stdscr, this_month, this_year):
    '''Ask user to input new event and add it the file'''
    y_max, x_max = stdscr.getmaxyx()
    days_in_month = days_max_this_month(this_year, this_month)
    # First, ask the date within this month:
    add_propmt = "Enter the date: "+str(this_year)+"/"+str(this_month)+"/"
    event_date = user_input(stdscr, add_propmt, 2)
    # If user's date is the number and is in this month, ask the title:
    try:
        if int(event_date) <= days_in_month and int(event_date) > 0:
            title_propmt = "Enter the title: "
            name = user_input(stdscr, title_propmt, x_max-len(title_propmt)-2)
            all_events = load_appointments(stdscr, y_max)
            event_id = 1 if not all_events[0] else max(all_events[0])+1
            new_event = str(event_id)+","+str(this_year)+","+str(this_month)+","+event_date+","+'"'+name+'"'
            if len(name) > 0:
                with open(DATAFILE, "a") as f:
                    f.write(new_event+"\n")
    except:
        pass


def delete_event(stdscr, events_this_month):
    '''Delete chosen events'''
    y_max, x_max = stdscr.getmaxyx()
    prompt_string = "Number of event to delete: "
    event_number = user_input(stdscr, prompt_string, 4)
    # If provided number is correct, then delete the event:
    try:
        num = int(event_number)
        if num <= len(events_this_month[0]) and num > 0:
            event_id = events_this_month[0][int(event_number)-1]
            event_name = events_this_month[2][int(event_number)-1]
            prompt_string = "Really delete "+event_name+"? (y/n)"
            confirmed = ask_confirmation(stdscr, prompt_string)

            if confirmed:
                original_file = DATAFILE
                dummy_file = DATAFILE + '.bak'
                line_deleted = False
                with open(original_file, 'r') as read_obj, open(dummy_file, 'w') as write_obj:
                    for line in read_obj:
                        if line.startswith(str(event_id)+',') == False:
                            write_obj.write(line)
                        else:
                            line_deleted = True
                if line_deleted:
                    os.remove(original_file)
                    os.rename(dummy_file, original_file)
                else:
                    os.remove(dummy_file)
    except:
        pass


def edit_event(stdscr, events_this_month, this_month, this_year):
    '''Edit chosen event via deleting it and creating a new one'''
    y_max, x_max = stdscr.getmaxyx()
    prompt_string = "Number of event to edit: "
    event_number = (user_input(stdscr, prompt_string, 4))
    event_chosen = False
    try:
        # If provided number is correct, then delete the event:
        num = int(event_number)
        if num <= len(events_this_month[0]) and num > 0:
            event_id = events_this_month[0][num-1]
            event_name = events_this_month[2][num-1]
            prompt_string = "Really edit "+event_name+"? (y/n)"
            confirmed = ask_confirmation(stdscr, prompt_string)
            if confirmed:
                original_file = DATAFILE
                dummy_file = DATAFILE + '.bak'
                line_deleted = False
                with open(original_file, 'r') as read_obj, open(dummy_file, 'w') as write_obj:
                    for line in read_obj:
                        if line.startswith(str(event_id)+',') == False:
                            write_obj.write(line)
                        else:
                            line_deleted = True
                if line_deleted:
                    os.remove(original_file)
                    os.rename(dummy_file, original_file)
                else:
                    os.remove(dummy_file)
                event_chosen = True
        else:
           pass
    except:
        pass
    if event_chosen:
        days_in_month = days_max_this_month(this_year, this_month)
        # First, ask the date within this month:
        add_propmt = "Enter new date: "+str(this_year)+"/"+str(this_month)+"/"
        event_date = user_input(stdscr, add_propmt, 2)
        # If user's date is the number and is in this month, ask the title:
        try:
            if int(event_date) <= days_in_month and int(event_date) > 0:
                title_propmt = "Enter new title: "
                name = user_input(stdscr, title_propmt, x_max-len(title_propmt)-2)
                all_events = load_appointments(stdscr, y_max)
                event_id = 1 if not all_events[0] else max(all_events[0])+1
                new_event = str(event_id)+","+str(this_year)+","+str(this_month)+","+event_date+","+'"'+name+'"'
                if len(name) > 0:
                    with open(DATAFILE, "a") as f:
                        f.write(new_event+"\n")
        except:
            pass
    return


def events_of_this_month(this_month, this_year, events):
    '''Filters only events that happen in this month and sorts them'''
    events_this_month = [[], [], []]
    for index, year in enumerate(events[1]):
        if (year == this_year) and (events[2][index] == this_month):
            events_this_month[0].append(events[0][index])
            events_this_month[1].append(events[3][index])
            events_this_month[2].append(events[4][index])
    sorted_all = sorted(zip(events_this_month[1], events_this_month[0], events_this_month[2]))
    events_this_month[0] = [x for _,x,_ in sorted_all]
    events_this_month[1] = [x for x,_,_ in sorted_all]
    events_this_month[2] = [x for _,_,x in sorted_all]
    return events_this_month


def next_month(this_month, this_year):
    '''Switches to the next month'''
    if this_month < 12:
        this_month += 1
    else:
        this_month = 1
        this_year += 1
    return this_month, this_year


def previous_month(this_month, this_year):
    '''Switches to the previous month'''
    if this_month > 1:
        this_month -= 1
    else:
        this_month = 12
        this_year -= 1
    return this_month, this_year


def user_input(stdscr, prompt_string, answer_length):
    '''Ask user to input something and return this string'''
    y_max, x_max = stdscr.getmaxyx()
    echo()
    curs_set(True)
    display_string = str(prompt_string) + " "*abs((x_max-len(prompt_string))-1)
    stdscr.addstr(y_max - 2, 0, display_string[:x_max-1], color_pair(8))
    stdscr.refresh()
    user_input = stdscr.getstr(y_max - 2, len(prompt_string), answer_length).decode(encoding="utf-8")
    noecho()
    curs_set(False)
    return user_input


def display_day_names(stdscr, x_max):
    '''Display day name depending on the screen available'''
    num = 2 if x_max < 80 else 10
    x_cell = int(x_max//7)
    stdscr.addstr(1, 0*x_cell, MON[:num], color_pair(1))
    stdscr.addstr(1, 1*x_cell, TUE[:num], color_pair(1))
    stdscr.addstr(1, 2*x_cell, WED[:num], color_pair(1))
    stdscr.addstr(1, 3*x_cell, THU[:num], color_pair(1))
    stdscr.addstr(1, 4*x_cell, FRI[:num], color_pair(1))
    stdscr.addstr(1, 5*x_cell, SAT[:num], color_pair(6))
    stdscr.addstr(1, 6*x_cell, SUN[:num], color_pair(6))


def display_icon_for_event(name, delete_mode, edit_mode):
    '''Check if event seems of certain type and return corresponding icon'''
    if not delete_mode and not edit_mode and DISPLAY_ICONS:
        icon = EVENT_ICON + " "
        for key in ICONS:
            if key in name.lower():
                icon = ICONS[key] + " "
    else:
        icon = ""
    return icon


def ask_confirmation(stdscr, prompt_string):
    '''Ask user confirmation for an action'''
    y_max, x_max = stdscr.getmaxyx()
    if ASK_CONFIRMATIONS:
        halfdelay(255)
        prompt = prompt_string + " "*abs(x_max - len(prompt_string) - 1)
        stdscr.addstr(y_max-2, 0, prompt[:x_max-1], color_pair(9))
        key = stdscr.getkey()
        confirmed = True if key == "y" else False
    else:
        confirmed = True
    return confirmed


def initialize_colors(stdscr):
    '''Define all the color pairs'''
    start_color()
    use_default_colors()
    init_pair(1, COLOR_DAY_NAMES, -1)
    init_pair(6, COLOR_WEEKEND_NAMES, -1)
    init_pair(3, COLOR_HINTS, -1)
    init_pair(7, COLOR_BIRTHDAYS, -1)
    init_pair(8, COLOR_PROPMTS, -1)
    init_pair(9, COLOR_CONFIRMATIONS, -1)
    if MINIMAL_WEEKEND_INDICATOR:
        init_pair(2, COLOR_WEEKENDS, -1)
    else:
        init_pair(2, COLOR_BLACK, COLOR_WEEKENDS)
    if MINIMAL_TODAY_INDICATOR:
        init_pair(4, COLOR_TODAY, -1)
    else:
        init_pair(4, COLOR_BLACK, COLOR_TODAY)
    if MINIMAL_DAYS_INDICATOR:
        init_pair(5, COLOR_DAYS, -1)
    else:
        init_pair(5, COLOR_BLACK, COLOR_DAYS)


def main(stdscr):
    '''This is the main function that runs the screen'''
    current_year  = datetime.now().year
    current_month = datetime.now().month
    current_day   = datetime.now().day
    this_month    = current_month
    this_year     = current_year
    if BIRTHDAYS_FROM_ABOOK:
        bd_names, bd_months, bd_dates = parse_birthdays_from_abook()

    # Starting the screen
    stdscr = initscr()
    initialize_colors(stdscr)
    y_max, x_max = stdscr.getmaxyx()
    running      = True
    delete_mode  = False
    edit_mode    = False
    refresh_mode = False
    show_hints   = SHOW_KEYBINDINGS
    while running:
        stdscr.clear()
        halfdelay(255)
        noecho()
        curs_set(False)
        all_events = load_appointments(stdscr, y_max)

        # Update today's date
        current_year  = datetime.now().year
        current_month = datetime.now().month
        current_day   = datetime.now().day

        # Displaying the month, year, and days of the week
        stdscr.addstr(0, 0, str(MONTH_NAMES[this_month-1])+" "+str(this_year))
        if SHOW_DAY_NAMES:
            display_day_names(stdscr, x_max)

        # Displaying the dates and events
        dates = days_of_this_month(this_month, this_year)
        events_this_month = events_of_this_month(this_month, this_year, all_events)
        day_number = 0
        y_cell = (y_max-2)//6
        x_cell = x_max//7
        num_of_event_this_month = 1
        for w in range(6):
            for d in range(7):
                this_date = dates[day_number]
                if this_date > 0:
                    # Show the dates:
                    day_type = 5 if d < 5 else 2
                    if current_year == this_year and current_month == this_month \
                            and current_day == this_date: day_type = 4
                    icon = TODAY_ICON*(day_type==4) if DISPLAY_ICONS else "·"*(day_type==4)
                    date_display = str(this_date)+icon+str(" "*(x_cell-len(str(this_date))-len(icon)))
                    stdscr.addstr(2+w*y_cell, d*x_cell, date_display, color_pair(day_type))

                    num_of_event_this_day = 0

                    # Show events
                    for event_date, event_name in zip(events_this_month[1], events_this_month[2]):
                        if this_date == event_date:
                            if num_of_event_this_day < y_cell - 1: # If screen space is ok
                                icon = display_icon_for_event(event_name, delete_mode, edit_mode)
                                number = (str(num_of_event_this_month)+"·")*(delete_mode or edit_mode)
                                disp = icon + number + event_name*(x_cell > 5)
                                disp = disp[:x_cell] if CUT_TITLES else disp[:x_max-d*x_cell]
                                stdscr.addstr(3+num_of_event_this_day+w*y_cell, d*x_cell, disp, color_pair(1))

                                num_of_event_this_day += 1
                                num_of_event_this_month += 1
                            else:
                                hidden = HIDDEN_ICON + " "*(x_cell - 3)
                                stdscr.addstr(3+num_of_event_this_day+w*y_cell-1, d*x_cell, hidden, color_pair(1))

                    # Show birthdays
                    if BIRTHDAYS_FROM_ABOOK:
                        for index, name in enumerate(bd_names):
                            if bd_months[index] == this_month and bd_dates[index] == this_date:
                                disp = BIRTHDAY_ICON*DISPLAY_ICONS+" "+name*(x_cell > 5)
                                disp = disp[:x_cell] if CUT_TITLES else disp[:x_max-d*x_cell]
                                stdscr.addstr(3+num_of_event_this_day+w*y_cell, d*x_cell, disp, color_pair(7))
                                num_of_event_this_day += 1
                day_number += 1

        # Show hints in footer
        if show_hints:
            stdscr.addstr(y_max - 1, 0, HINT[:x_max-2], color_pair(3))

        # Handle user input
        refresh_mode = False
        if delete_mode:
            delete_event(stdscr, events_this_month)
            delete_mode = False
            refresh_mode = True

        if edit_mode:
            edit_event(stdscr, events_this_month, this_month, this_year)
            edit_mode = False
            refresh_mode = True

        if not refresh_mode:
            try:
                key = stdscr.getkey()

                # Handle "gg" to go to current month
                if key == "g":
                    try:
                        key = stdscr.getkey()
                        if key == "g":
                            this_month = current_month
                            this_year = current_year
                        sdtscr.refresh()
                    except KeyboardInterrupt:
                        running = False
                    except:
                        pass

                # Handle screen resize
                if key == "KEY_RESIZE":
                    y_max, x_max = stdscr.getmaxyx()
                    stdscr.clear()
                    stdscr.refresh()

                # Handle rest of the user input
                if key in ["n", "j", "l", "KEY_UP", "KEY_RIGHT"]:
                    this_month, this_year = next_month(this_month, this_year)
                if key in ["p", "h", "k", "KEY_DOWN", "KEY_LEFT"]:
                    this_month, this_year = previous_month(this_month, this_year)
                if key in ["a", " "]: add_event(stdscr, this_month, this_year)
                if key in ["d", "x"]: delete_mode = True
                if key in ["e", "c"]: edit_mode = True
                if key == "q":
                    prompt_string = "Really exit? (y/n)"
                    confirmed = ask_confirmation(stdscr, prompt_string)
                    running = False if confirmed else True
                if key == "?": show_hints = not show_hints
                if key == "i": import_events_from_calcurse(all_events)
                if key in ["KEY_HOME", "G"]:
                    this_month = current_month
                    this_year = current_year

            except KeyboardInterrupt:
                running = False
            except:
                pass

    echo()
    curs_set(True)
    endwin()
    return

if __name__ == "__main__":
    wrapper(main)
